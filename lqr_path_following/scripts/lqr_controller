#!/usr/bin/env python
from sensor_msgs.msg import NavSatFix, Imu
from geometry_msgs.msg import Twist, TwistStamped
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64
from mavros_msgs.msg import OverrideRCIn, VFR_HUD, WaypointList
from sensor_msgs.msg import TimeReference
import rospy
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import math
import sys, random, math
from math import sqrt,cos,sin,atan2
import os
import roslib
import numpy as np
from numpy import linalg as LA
import csv
import time
import tf
import numpy
from datetime import datetime
from time import time
from mavros_msgs.srv import SetMode, CommandBool

#Variable Initialise
#wp load /home/mandeep/Desktop/waypoint1.txt

###############################Initaializing Global Variables######################################
height = 0
vx = 0
vy = 0
vz = 0
wz = 0
v = 0
throttle = 0
airspeed = 0
groundspeed = 0
curr_x = 0
curr_y = 0
roll = 0
yaw = 0
pitch = 0
pitch_rate = 0
first_waypt = [0,0]
pehlibar = True
g = 9.8 
waypoint_6 = False # waypoint before landing point | enter ino cruise mode after passing into this mode
successful_landing = False
#####################################################################################



def dist(a,b):
    return math.sqrt((a[1]-b[1])**2+(a[0]-b[0])**2)



def letsland():
    #################################### Initializing Variables ######################
    global psi,dist_home, change_mode, takeoff, height, vx, vy, vz, wz, v, curr_x, curr_y, roll, pitch, yaw, g, first_waypt, throttle, groundspeed, airspeed
    
    h = [] # height for plotting data
    d = [] # dist. from landing point for plotting data
    t = [] # expected glise slope for plotting
    gldslp_no_pitch = [] 
    p = [] # pitch graph
    error_alt_plot = []
    r = []
    y = []
    x = []
    zer = []
    aileron = []
    sim_tim = []

    time_counter = 0
    runway = [] # runway position points
    tmp = []

    #######Introducing noise in ship pitch and altitude
    mean = 0
    std = 1

    V = 0 # resultant velocity in 3d  
    pwm = 0 # pwm value for pitch
    dist_home = 0

    cte = 0 #cross track error
    prev_cte = 0
    prev_cte_xy = 0
    max_diff = 0# max. error in expected altitude vs real altitude 

    #### PID constants 
    kp = 1#0.23 #0.4 #13 
    kd = 1#0.4#0.1 # 15
    ki = 0.001 #0.005

    kp_xy = 0.025#1 #0.5 
    kd_xy = 0.09 #1.5 # 15
    ki_xy = 0.0001 #0.005    

    k = 2
    q2 = 1#0.0001#1.2    

    angle = 3 # glide_slope_angle
    offset = 20
    ship_speed = 5
    db = 1;
    ship_pitch = 0

    time_speed = 0.1

    print "\nLanding Controller running at 10 Hz"
    print "Output Display running at 1 Hz\n"

    f_obj1 = open("/home/mandeep/Desktop/Landing_Plots/tmp.dat","w")

    #print "Param Values kp : " +  str(kp) + " kd : " + str(kd) + " ki : " + str(ki) + " offset : " + str(offset) + " SHip speed : " + str(ship_speed) + " Time Speed : ", str(time_speed) 
    #print "Param Values kp_xy : " +  str(kp_xy) + " kd_xy : " + str(kd_xy) + " ki_xy : " + str(ki_xy) + " K: ", str(k) + " q2: ", str(q2)

    # PID related variable
    proportional = 0
    integral = 0
    derivative = 0
    start_integral = 1

    proportional_xy = 0
    integral_xy = 0
    derivative_xy =0
    start_integral_xy = 1
    total_cte_xy = 0

    prev_pitch = 0
    previous_error = 0
    prev_theta_des = 0  
    prev_psi = 0

    previous_error_xy = 0
    prev_theta_des_xy = 0
    prev_y = 0 
    prev_derivative_xy = 0

    landed = 0 # flag to check landed or not
    lp_x = 0  # Landing Point X
    lp_y = 0  # Landing Point Y
    lp_offset = 0  

    csv_path = "/home/mandeep/Downloads/ss4_wave_height.csv"
    f_obj = open(csv_path,"r")
    #ship_pitch = (float(f_obj.readline()[:-1]))/2    

    # Variables to calculate landng time from second last waypoint
    initial_time = time()
    current_time = 0
    string = "Moving Runway (kp : " + str(kp) + " kd : " + str(kd)  + " ki : " + str(ki) + " offset : " + str(offset) + " ship_speed : " + str(ship_speed)  + ")"
    flare_param = 0
    slope = 0 # slope for calculating moving landing point from home positioning
    dist_land = 0 # distance from landing point

    # intializing topics and services
    pub = rospy.Publisher('mavros/rc/override', OverrideRCIn, queue_size=1000)
    change_mode = rospy.ServiceProxy('/mavros/set_mode', SetMode)
    arming = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)
    rospy.wait_for_service('/mavros/set_mode')
    rospy.wait_for_service('/mavros/cmd/arming')

    control = OverrideRCIn()

    while (takeoff == False): # wait till second last waypoint
        slope = 0 # no special purpose

    resp1 = change_mode(custom_mode="FBWB")
    print ("Mode Change to FBWB")
    approach_time = time()
    time_loop = time() # for printing at 1 sec interval
    time_to_land = time() 
    print_time = time()
    theta_des = 0

    print_frequency = 1
    #print "Height", " ", "PWM", " ", "Elev_Angle", " ", "Error_Alt", " ", "Pitch", " ", "Pitch_Rate", " ", "Throttle", " ", "AirSpeed", " ", "GroundSpeed"
    
    gs_once = 0 # printing conditions for printing one time only
    am_once = 0

    while(landed == 0): 

        current_time = time()

        # Calculating moving landing point for moving at 5 m/s
        if(current_time - initial_time > 0.1):
            initial_time = current_time
            lp_offset = lp_offset + ship_speed*0.1
            lp_x,lp_y = landing_point(lp_x, lp_y, lp_offset, curr_x, curr_y, slope)
            

        # for printing at differnet rate than controller
        if(time() - print_time > print_frequency):
        	print " "
	        print "Current Altitude : ", height            
	        print "Error Altitude : ", error_alt
	        print "Dist from Landing Point" , dist_land
	        print " "
	        print_time = time()

        # controller frequency maintained by time_speed
        if(time() - time_loop > time_speed):

            psi_local = psi 

            time_counter = time_counter + time_speed

            ship_pitch = ((float(f_obj.readline()[:-1])))#/15
            #print " Ship Pitch :", ship_pitch
            #angle = abs(3)# + (ship_pitch)/4)
            V = sqrt(vx*vx + vz*vz)

            # distance between two points
            dist_land = sqrt((curr_x - lp_x)*(curr_x - lp_x))
       
            h_des = dist_land*math.tan(to_rad(angle)) + (ship_pitch)# + 6
            h_des_no_pitch = dist_land*math.tan(to_rad(angle))

            h_des_dot = (sqrt(vx*vx + vy*vy) - ship_speed)*math.tan(to_rad(angle))

            error_alt = (height - h_des)
            error_xy = curr_y

            error_alt_rate = vz - h_des_dot   

            R = sqrt((curr_x)*(curr_x) + (curr_y)*(curr_y))
            #theta_M = math.atan2(curr_y,curr_x + 5000)
            theta_M = math.atan2(curr_x + 5000,-curr_y)

            V_xy = sqrt(vx*vx + vy*vy)

            #print "Curr_x : ", curr_x , "Curr_y : ", curr_y
            if(abs(psi_local - prev_psi) > 1 and prev_psi != 0):
                psi_local = prev_psi
                print " GOT in IF "
            #print "Psi Degrees : ", psi_local
            #print "Theta_M Degrees: ", to_deg(theta_M) 
            #rint "Sin(psi - 90)", math.sin(to_rad(psi_local - 90))             
            psi_local_rad = to_rad(psi_local - 90)
            error_xy_rate = (V_xy*0.1)*math.sin(psi_local_rad)# - theta_M)

            q1 = math.exp(-0.05*abs(error_xy))#-0.7
            q1_z = math.exp(0.05*abs(error_alt))
            #q1_z = abs(db/(db - error_alt))

            if (V == 0):
            	theta_des_dot = (-sqrt(q1_z)*error_alt + sqrt(2*sqrt(q1_z) + q2)*error_alt_rate)
            	#theta_des_dot = 1.5*(-0.35*error_alt + sqrt(0.79)*error_alt_rate)
            	theta_des =  theta_des_dot 

                #theta_des = (-sqrt(q1_z)*error_alt + sqrt(2*sqrt(q1_z) + q2)*error_alt_rate)                
                roll_des = (-sqrt(q1)*error_xy + sqrt(2*sqrt(q1) + q2)*error_xy_rate)
                #roll_des = (gain*((q1*error_xy) + (sqrt(q2)*error_xy_rate)))
            else:
            	theta_des_dot = (-sqrt(q1_z)*error_alt + sqrt(2*sqrt(q1_z) + q2)*error_alt_rate)/V
            	#theta_des_dot = 1.5*(-0.35*error_alt + sqrt(0.79)*error_alt_rate)/V            	
            	theta_des =  theta_des_dot
                
                #theta_des = (-sqrt(q1_z)*error_alt + sqrt(2*sqrt(q1_z) + q2)*error_alt_rate)/V                
                roll_des = (-sqrt(q1)*error_xy + sqrt(2*sqrt(q1) + q2)*error_xy_rate)#/V
                #roll_des = (gain*((q1*error_xy) + (sqrt(q2)*error_xy_rate)))/V
            
            #if(-0.5 < error_alt < 0.5):
            #	theta_des = 0;
            
            #print ""
            #print "Pitch", pitch
            #print "theta_des", theta_des
            #print "theta_des_dot", theta_des_dot 
            #print ""

            if (theta_des > 1.57):
                theta_des =  1.57

            if (theta_des < -1.57):
                theta_des = -1.57

            # cross track error in pitch
            cte_xy = roll - roll_des
            cte = pitch - theta_des

            proportional = kp*(cte)
            derivative = kd*(cte - prev_cte)
            if(start_integral):
                integral = integral + ki*(cte)
            
            eta = proportional + derivative + integral
            #print "Pitch - Theta des", (pitch - theta_des)
            ele_angle = math.degrees(float(eta)) # -27 for auto mode
            '''
            if(ele_angle > 0):
            	ele_angle = math.degrees(float(eta)) + offset
            else:
            	ele_angle = math.degrees(float(eta)) - offset	 
            '''	
            #print "cte :" , cte
            #print "Elevation Angle Atual", -ele_angle
            ele_angle = -ele_angle 
            
            #print "Elevator angles after offset", ele_angle
            if (ele_angle > 25):
                start_integral = 0
                ele_angle = 25
            if (ele_angle < -25):
                ele_angle = -25
                start_integral = 0
            if(25 > ele_angle > -25):
                start_integral = 1 
            #print "Pitch angle in degree", ele_angle


            proportional_xy = kp_xy*(cte_xy)
            derivative_xy = kd_xy*(cte_xy - prev_cte_xy)
            #if (derivative_xy == 0):
            #    derivative_xy = prev_derivative_xy
            total_cte_xy = total_cte_xy + cte_xy
            if(start_integral_xy):
                integral_xy = ki_xy*(total_cte_xy)
            eta_xy = proportional_xy + derivative_xy + integral_xy

            #print "Pitch - Theta des", (pitch - theta_des)
            roll_angle = math.degrees(float(eta_xy)) #+ 1 #10

            #print "Elevator angles", ele_angle
            if (roll_angle > 25):
                start_integral_xy = 0
                roll_angle = 25
            if (roll_angle < -25):
                roll_angle = -25
                start_integral_xy = 0
            if(25 > roll_angle > -25):
                start_integral_xy = 1

            #print "\n Pwm elevator :", pwm    

            pwm = 1500 + ele_angle*11
            pwm_xy = 1500 + roll_angle*11
            #print "PWM Value", pwm
            if((time() - approach_time) > 20): #20            
                control.channels[1] = pwm
                control.channels[0] = pwm_xy
                control.channels[4] = 1500                       
                pub.publish(control)
                if(gs_once == 0):
                	print "Landing Approach Mode Deactivated\n"
	                print "Landing GlideSlope Mode Activated\n" 
	                gs_once = 1
            else:
                control.channels[0] = pwm_xy
                control.channels[4] = 1500                
                pub.publish(control)                
                proportional = 0
                derivative = 0
                integral = 0
                eta = 0
                if(am_once == 0):
	                print "\nLanding Approach Mode Activated\n" 
	                am_once = 1

            if (curr_x < 0):
                #dist_home = sqrt(curr_x*curr_x + curr_y*curr_y)           
                dist_home = (-1)*sqrt(curr_x*curr_x)
            else:
                #dist_home = (-1)*sqrt(curr_x*curr_x + curr_y*curr_y)
                dist_home = (1)*sqrt(curr_x*curr_x)
            runway.append(sqrt((lp_x)*(lp_x)))
            tmp.append(ship_pitch)
            t.append(h_des)
            gldslp_no_pitch.append(h_des_no_pitch) 
            h.append(height)
            d.append(dist_home)
            error_alt_plot.append(error_alt)
             # its common
            p.append(to_deg(-pitch))
            sim_tim.append(time_counter)
            y.append(curr_y)
            x.append(curr_x)
            aileron.append(roll_angle)
            zer.append(0)             
            # 10 things being written into file
            # 1.dist, 2.height, 3.r, 4.p, 5.y, 6.time, 7.ship_pitch, 8.position ship, 9.error_alt , 10.ele_angle, 11. curr_y, 12.curr_x, 13.roll_angle
            f_obj1.write(str(dist_home) + "," + str(height) + "," + str(to_deg(roll)) + "," + str(to_deg(-pitch)) + "," + str(to_deg(yaw)) + "," + str(time_counter) + "," + str(ship_pitch) + "," + str(lp_x) + "," + str(error_alt) + "," + str(ele_angle) + "," + str(curr_y) + "," + str(curr_x) + "," + str(roll_angle) + "," + str(h_des) + "," + str(h_des_no_pitch) + "\n")
       

            if (abs(dist_land*math.tan(to_rad(angle)) - height) > max_diff):
                max_diff = abs(dist_home*math.tan(to_rad(angle)) - height) 

            prev_pitch = pitch
            previous_error = error_alt
            prev_theta_des = theta_des
            prev_cte = cte

            prev_cte_xy = cte_xy
            prev_y = curr_y
            prev_derivative_xy = derivative_xy             

            prev_psi = psi_local
            #print "Prev_Psi : ", prev_psi
            time_loop = time()            
        # cut throttle and pitch high (flare)
        #height <= 0.2
        if(((1 + ship_pitch < height < 5 + ship_pitch) and (0 < -(curr_x - lp_x) < 15)) or (height < 0.2 + ship_pitch)) :
            time_to_land = time() - time_to_land
            #flare_time = time() - flare_time
            landed = 1
            control.channels[2] = 1100
            control.channels[1] = 1100
            control.channels[0] = 1500
            control.channels[3] = 1500
            pub.publish(control)
            print "Landed"
            # disarm
            try:
                armService = rospy.ServiceProxy('/mavros/cmd/arming', CommandBool)
                armService(False)
            except rospy.ServiceException, e:
                print "Service arm call failed: %s"%e

    #print "Time to Land from last waypoint" , time_to_land
    #print "Flare before ", flare_time, " seconds"
    #print " Final Landing Point Distance", sqrt(lp_x*lp_x + lp_y*lp_y)
    #print d
    f_obj1.close()
    #print "Curr_x : ", curr_x, "Curr_y : ", curr_y, " Lp_x : ", lp_x, " Lp_y : ", lp_y, "Altitude : ", height
    #print "Max Error in Altitude", max_diff
    #print "Distance from Landing Point ", curr_x - lp_x

    if( (0 < -(curr_x - lp_x) < 15) and ( 1 + ship_pitch < height < 5 + ship_pitch) ):
        successful_landing = True
    else:
        successful_landing = False

    print "Landing Successful : ", successful_landing

    plt1, = plt.plot(d,h,color = 'blue',linewidth = 0.05) #actual uav glidesope     
    plt2, = plt.plot(d,t, color = 'red',linewidth = 0.05) # plot expected glideslope
    plt8, = plt.plot(d,gldslp_no_pitch, color = 'violet',linewidth = 0.05) # plot expected glideslope without pitch
    plt3, = plt.plot(runway,tmp,color = 'green',linewidth = 0.05) # plot runway position

    plt.title("Landing Glideslope")
    plt.xlabel("Dist. from Landing Point in m")
    plt.ylabel("Height of UAV in m")        
    #plt.legend((plt1, plt3),('UAV Glidslope', 'Runway Position'))
    plt.legend((plt1, plt2, plt3),('UAV Glidslope', 'Expected Glideslope', 'Runway Position'))    
    #plt.axis([-4500, 4000, -50, 500])

    plt.show()         

    '''
    plt4 = plt.scatter(sim_tim,p,color = 'blue')
    plt.xlabel("Time (s)")
    plt.ylabel("Pitch (rad)")
    plt.title("UAV Pitch in radians")
    plt.show()
	

    #string = "Kp:"+ str(kp_xy)+ " kd:"+str(kd_xy)+ " ki:"+str(ki_xy)+ " lqr_gain:"+str(k)# + " gain:"+str(gain) 
    plt.title('')
    plt5 = plt.scatter(d,y)
    plt.show()  
	'''

    plt.title('UAV Path')
    fig = plt.figure()
    ax, = Axes3D(fig)
    ax.plot(x, y, h)
    plt.show()

    #string = "Kp:"+ str(kp_xy)+ " kd:"+str(kd_xy)+ " ki:"+str(ki_xy)+ " lqr_gain:"+str(k)# + " gain:"+str(gain) 
    plt.title("Error Altitude")
    plt6, = plt.plot(d,error_alt_plot)
    plt.show()  

def landing_point(lp_x,lp_y,lp_offset, curr_x,curr_y,m):
    #m - slope
    dist = 2*lp_offset
    lp_x = dist/sqrt(m*m + 1)
    lp_y = m*lp_x
    #print "Landing Point , slope :", lp_x,lp_y,m 
    return lp_x,lp_y

def distance(pt1,pt2):
	pt1_x = pt1[0]
	pt1_y = pt1[1]
	pt1_z = pt1[2]

	pt2_x = pt2[0]
	pt2_y = pt2[1]
	pt2_x = pt2[2]

	dist = sqrt((pt1_x - pt2_x)**2 + (pt1_y - pt2_y)**2 + (pt1_z - pt2_z)**2)
	return dist

def point_to_line(pt, v1, v2)
      a = v1 - v2;
      b = pt - v2;
      d = LA.norm(np.cross(a,b)) / LA.norm(a);
      return d

def navigation():

	global uav_x,uav_y,uav_z,uav_si

	controller_freq = 10
	v = 18 # uav_speed

	# Waypoint List
	wp_list = [[0,0,0], [600, 0, 30]; [1200, 300, 60];[900,900,70]; [300, 1200, 60]; [0,600,30]; [0, 0, 0]];
	wp_length = len(wp_list)
	curr_wp = 1
	wp_rad = 10

	while(curr_wp <= wp_length)
	
		wp_1 = np.array(a[curr_wp - 1])
		wp1_x = wp_1[0]
		wp1_y = wp_1[1]
		wp1_z = wp_1[2]

		wp_2 = np.array(a[curr_wp])
		wp2_x = wp_1[0]
		wp2_y = wp_1[1]
		wp2_z = wp_1[2]

		uav_pos = np.array([uav_x,uav_y,uav_z])

		wp_dist = distance(uav_pos, wp_2)

		controller_loop = time()
		
		while(wp_dist > wp_rad)

			if(time() - controller_loop > (1/controller_freq))
				
				# XY controller
				tmp = (uav_x - wp1_x)*(wp2_y - wp1_y) - (uav_y - wp1_y)*(wp2_x - wp1_x)

				if(tmp < 0):
					d_xy = point_to_line(uav_pos,wp_1,wp_2)
				else :
					d_xy = -point_to_line(uav_pos,wp_1,wp_2)

				# LQR Formulation
				db = 4;
				k = 0.01;
				q1 = sqrt(np.exp(k*(np.abs(d_xy))));

				si_p = math.atan2((wp2_y - wp1_y),(wp2_x - wp1_x))
				vd = v*sin(si - si_p) +  vw*sin(si_w - si_p)

				# Z Controller


				controller_loop = time()

def getXY_waypt(x,y,origin_x,origin_y,pre_x,pre_y):
    '''
    latrad = to_rad(lat)
    lonrad = to_rad(lon)
    lat_pre = to_rad(lat_pre)
    lon_pre = to_rad(lon_pre)
    '''
    if x==origin_x:
        pre_x=0
        pre_y=0
    else:
        pre_x = x - origin_x
        pre_y = y - origin_y
    return pre_x,pre_y
    
def to_rad(deg):
    rad=(deg*math.pi)/180.0 
    return rad

def to_deg(rad):
    deg=(rad*180)/math.pi
    return deg

def get_heading(measurement):
    global uav_si
    uav_si = measurement.data

def getAltitude(measurement):
    global uav_z
    uav_z = measurement.data
    if uav_z < 0:
        uav_z = -1*uav_z
    #print height    

def getRPY(measurement):
    global pitch, roll, yaw, pitch_rate
    a = measurement.orientation.x
    b = measurement.orientation.y
    c = measurement.orientation.z
    d = measurement.orientation.w
    [r,p,y] = tf.transformations.euler_from_quaternion((a,b,c,d))
    pitch = -p
    roll = r
    yaw = y
    #print "Yaw value ", to_deg(yaw)
    pitch_rate = measurement.angular_velocity.y
    #print pitch

def getWind(measurement):
    global wz
    wz=measurement.twist.linear.z

def getVelocity(measurement):
    global vx,vy,vz,v_xy
    x=measurement.twist.linear.x
    y=measurement.twist.linear.y
    z=measurement.twist.linear.z
    vx=math.sqrt(x ** 2)
    vy=math.sqrt(y ** 2)
    vz=math.sqrt(z ** 2)
    v_xy = math.sqrt((vx**2) + (vy**2))

# Make home as (0,0) and localize the plane position respect to that
def getGPS(measurement):
    global uav_x,uav_y,pehlibar,first_waypt
    x=measurement.pose.pose.position.x
    y=measurement.pose.pose.position.y
    if pehlibar == True:
        first_waypt = [x,y]
        #print "Origin: ",first_waypt
        pehlibar = False
    uav_x,uav_y = getXY_waypt(x,y,first_waypt[0],first_waypt[1],0,0)

def uav_speed(measurement):
    global throttle, airspeed, groundspeed
    throttle=measurement.throttle
    airspeed = measurement.airspeed
    groundspeed = measurement.groundspeed

def takeoff_check(measurement):
    global takeoff
    waypoints = measurement.waypoints
    #print "Size of waypoints ", len(waypoints)
    takeoff = waypoints[1].is_current
    print "Is Takeoff Successfull", takeoff
    
def listener():
    global change_mode
    rospy.init_node('listener', anonymous=True)
    rate = rospy.Rate(20) # 10hz
    #r = rosrate(0.05)
    # rospy.Subscriber("/mavros/global_position/global", NavSatFix, plot_gps_measurements)

    # To check if takeoff waypoint succesfully exceuted
    rospy.Subscriber("/mavros/mission/waypoints", WaypointList, takeoff_check)
    # To get air_speed, ground_speed, throttle
    rospy.Subscriber("/mavros/VFR_HUD", VFR_HUD, uav_speed)
    # To get GPS directly converted to UTM Coordinates
    rospy.Subscriber("/mavros/global_position/local", Odometry, getGPS)
    # To get uav x,y,z velocities
    rospy.Subscriber("/mavros/global_position/raw/gps_vel", TwistStamped, getVelocity)
    # To get wind x,y,z velocities
    rospy.Subscriber("/mavros/wind_estimation", TwistStamped, getWind)
    # Get roll, pitch, yaw
    rospy.Subscriber("/mavros/imu/data", Imu, getRPY)
    # Get uav height
    rospy.Subscriber("/mavros/global_position/rel_alt", Float64, getAltitude)
    # Get uav heading angle
    rospy.Subscriber("/mavros/global_position/compass_hdg",Float64,get_heading)     

    letsland()
    rospy.spin()

if __name__ == '__main__':
    listener()

#takeoff